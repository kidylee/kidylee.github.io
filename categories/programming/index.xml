<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Programming - 分类 - An Li's Blog</title><link>http://kidylee.com/categories/programming/</link><description>Programming - 分类 - An Li's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>kidylee@gmail.com (An Li)</managingEditor><webMaster>kidylee@gmail.com (An Li)</webMaster><lastBuildDate>Sun, 28 Aug 2022 23:52:24 +0800</lastBuildDate><atom:link href="http://kidylee.com/categories/programming/" rel="self" type="application/rss+xml"/><item><title>如何为已有Spring项目新增 APIKey 认证登录</title><link>http://kidylee.com/posts/adding-apikey-auth-in-existing-spring-project/adding-apikey-auth-in-existing-spring-project/</link><pubDate>Sun, 28 Aug 2022 23:52:24 +0800</pubDate><author>作者</author><guid>http://kidylee.com/posts/adding-apikey-auth-in-existing-spring-project/adding-apikey-auth-in-existing-spring-project/</guid><description><![CDATA[<div class="featured-image">
                <img src="https://source.unsplash.com/lPQIndZz8Mo/w=800" referrerpolicy="no-referrer">
            </div><p>技术向的SaaS平台多数都会提供API提供给开发者，或者来支撑客户端和SDK，我司也不例外。虽然浏览器保存Oauth2 token很方便，但token自身存在过期时间，并且由于token本身是第三方颁发的，对于客户端和sdk来说是一种潜在的隐患，经常因为第三方验证服务出问题，造成用户无法登录。因此，提供API Key方式访问成为了一种更好的选择。</p>
<p>新增APIKey访问方式有两个思路：</p>
<ul>
<li>复用原有Web API，在现有项目提供OAuth2的基础上，再并行引入API Key的认证方式来访问相同的服务</li>
<li>完全另起一套服务，通过代码共享来提供一致的服务。</li>
</ul>
<p>两个选项个有优劣，在产品前中期，web和api访问方式大致相同的情况下，第一种的效果会好一些，而当项目进入中后期，web和api的差异，无论是功能方面去考虑还是安全方面去考虑，完全隔离可能会是一个更好的选择。因为目前大部分和web功能是一致的决定在后端已有OAuth2的认证之上，再添加一个并行的API Key的认证方式，从而方便用户使用。</p>
<p>本文主要介绍如何为已有Spring项目新增APIKey认证登录的最佳实践。</p>]]></description></item></channel></rss>